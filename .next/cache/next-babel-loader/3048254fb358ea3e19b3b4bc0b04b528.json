{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { EmptyState, Layout, Page, TextStyle } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../componenets/ResourceList';\nimport CarbonMetrics from '../componenets/carbon-metrics'; //TextStyle has a variation prop that can give your text more visual meaning and add hierarchy to a page\n//Page replaces the div tags to make a polaris styled page\n//Layout\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg'; // state is the state of resource picker\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants (first: 1){\n          edges {\n            node {\n              weight\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass Index extends React.Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"handleSelection\", resources => {\n      const idsFromResources = resources.selection.map(product => product.id);\n      this.setState({\n        open: false\n      });\n      store.set('ids', idsFromResources);\n    });\n\n    this.state = {\n      open: false,\n      showMetrics: false\n    };\n    this.showMetrics.bind(this);\n  }\n\n  showMetrics() {\n    const metricsToggle = !this.state.showMetric;\n    return this.setState({\n      showMetrics: metricsToggle\n    });\n  }\n\n  render() {\n    const emptyState = !store.get('ids');\n    return __jsx(Query, {\n      query: GET_PRODUCTS_BY_ID,\n      variables: {\n        ids: store.get('ids') || []\n      }\n    }, ({\n      data = {},\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message);\n      return __jsx(Page, null, __jsx(TitleBar, {\n        primaryAction: {\n          content: 'Select products',\n          onAction: () => this.setState({\n            open: true\n          })\n        }\n      }), __jsx(ResourcePicker, {\n        resourceType: \"Product\",\n        showVariants: false,\n        open: this.state.open,\n        onSelection: resources => this.handleSelection(resources),\n        onCancel: () => this.setState({\n          open: false\n        })\n      }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n        heading: \"Select products to start\",\n        action: {\n          content: 'Select products',\n          onAction: () => this.setState({\n            open: true\n          })\n        },\n        image: img\n      }, __jsx(\"p\", null, \"Select products to change their price temporarily.\"))) : __jsx(ResourceListWithProducts, {\n        items: data.nodes\n      }), __jsx(CarbonMetrics, {\n        items: data.nodes\n      }));\n    });\n  }\n\n}\n\nexport default Index;","map":{"version":3,"sources":["/Users/davidnoah/Desktop/fullstack/stackathon/pages/index.js"],"names":["gql","Query","EmptyState","Layout","Page","TextStyle","ResourcePicker","TitleBar","store","ResourceListWithProducts","CarbonMetrics","img","GET_PRODUCTS_BY_ID","Index","React","Component","constructor","resources","idsFromResources","selection","map","product","id","setState","open","set","state","showMetrics","bind","metricsToggle","showMetric","render","emptyState","get","ids","data","loading","error","message","content","onAction","handleSelection","nodes"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport {  EmptyState, Layout, Page, TextStyle } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../componenets/ResourceList';\nimport CarbonMetrics from '../componenets/carbon-metrics'\n//TextStyle has a variation prop that can give your text more visual meaning and add hierarchy to a page\n//Page replaces the div tags to make a polaris styled page\n//Layout\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n// state is the state of resource picker\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants (first: 1){\n          edges {\n            node {\n              weight\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass Index extends React.Component {\n  constructor(){\n    super()\n    this.state = { \n      open: false,\n      showMetrics: false\n    };\n    this.showMetrics.bind(this)\n  }\n  showMetrics() {\n    const metricsToggle = !this.state.showMetric\n    return this.setState({ showMetrics: metricsToggle })\n  }\n  render() {\n    const emptyState = !store.get('ids');\n\n    return (\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') || [] }}>\n          {({ data = {}, loading, error }) => {\n            if (loading) return <div>Loadingâ€¦</div>;\n            if (error) return <div>{error.message}</div>;\n\n        return(\n          <Page>\n            <TitleBar\n              primaryAction={{\n                content: 'Select products',\n                onAction: () => this.setState({ open: true })\n              }}\n            />\n            <ResourcePicker\n              resourceType=\"Product\"\n              showVariants={false}\n              open={this.state.open}\n              onSelection={(resources) => this.handleSelection(resources)}\n              onCancel={() => this.setState({ open: false })}\n            />\n            {emptyState ? (\n            <Layout> \n              <EmptyState\n                heading=\"Select products to start\"\n                action={{\n                  content: 'Select products',\n                  onAction: () => this.setState({ open: true }),\n                }}\n                image={img}\n              >\n            <p>Select products to change their price temporarily.</p>\n          </EmptyState>\n        </Layout>\n        ) : (\n        <ResourceListWithProducts items={data.nodes}/>\n      )}\n      <CarbonMetrics items={data.nodes}/>\n    </Page>\n    );\n    }}\n  </Query>\n  );\n}\n  handleSelection = (resources) => {\n    const idsFromResources = resources.selection.map((product) => product.id);\n    this.setState({ open: false })\n    store.set('ids', idsFromResources);\n  };\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}