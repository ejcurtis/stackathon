{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getProducts($ids: [ID!]!) {\\n    nodes(ids: $ids) {\\n      ... on Product {\\n        title\\n        handle\\n        id\\n        images(first: 1) {\\n          edges {\\n            node {\\n              originalSrc\\n              altText\\n            }\\n          }\\n        }\\n        variants (first: 1){\\n          edges {\\n            node {\\n              weight\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { EmptyState, Layout, Page, TextStyle } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../componenets/ResourceList';\nimport CarbonMetrics from '../componenets/carbon-metrics'; //TextStyle has a variation prop that can give your text more visual meaning and add hierarchy to a page\n//Page replaces the div tags to make a polaris styled page\n//Layout\n\nvar img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg'; // state is the state of resource picker\n\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelection\", function (resources) {\n      var idsFromResources = resources.selection.map(function (product) {\n        return product.id;\n      });\n\n      _this.setState({\n        open: false\n      });\n\n      store.set('ids', idsFromResources);\n    });\n\n    _this.state = {\n      open: false,\n      showMetrics: false\n    };\n\n    _this.showMetrics.bind(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"showMetrics\",\n    value: function showMetrics() {\n      var metricsToggle = !this.state.showMetric;\n      return this.setState({\n        showMetrics: metricsToggle\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var emptyState = !store.get('ids');\n      return __jsx(Query, {\n        query: GET_PRODUCTS_BY_ID,\n        variables: {\n          ids: store.get('ids') || []\n        }\n      }, function (_ref) {\n        var _ref$data = _ref.data,\n            data = _ref$data === void 0 ? {} : _ref$data,\n            loading = _ref.loading,\n            error = _ref.error;\n        if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n        if (error) return __jsx(\"div\", null, error.message);\n        return __jsx(Page, null, __jsx(TitleBar, {\n          primaryAction: {\n            content: 'Select products',\n            onAction: function onAction() {\n              return _this2.setState({\n                open: true\n              });\n            }\n          }\n        }), __jsx(ResourcePicker, {\n          resourceType: \"Product\",\n          showVariants: false,\n          open: _this2.state.open,\n          onSelection: function onSelection(resources) {\n            return _this2.handleSelection(resources);\n          },\n          onCancel: function onCancel() {\n            return _this2.setState({\n              open: false\n            });\n          }\n        }), emptyState ? __jsx(Layout, null, __jsx(EmptyState, {\n          heading: \"Select products to start\",\n          action: {\n            content: 'Select products',\n            onAction: function onAction() {\n              return _this2.setState({\n                open: true\n              });\n            }\n          },\n          image: img\n        }, __jsx(\"p\", null, \"Select products to change their price temporarily.\"))) : __jsx(ResourceListWithProducts, {\n          items: data.nodes\n        }), __jsx(CarbonMetrics, {\n          items: data.nodes\n        }));\n      });\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport default Index;","map":{"version":3,"sources":["/Users/davidnoah/Desktop/fullstack/stackathon/pages/index.js"],"names":["gql","Query","EmptyState","Layout","Page","TextStyle","ResourcePicker","TitleBar","store","ResourceListWithProducts","CarbonMetrics","img","GET_PRODUCTS_BY_ID","Index","resources","idsFromResources","selection","map","product","id","setState","open","set","state","showMetrics","bind","metricsToggle","showMetric","emptyState","get","ids","data","loading","error","message","content","onAction","handleSelection","nodes","React","Component"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport {  EmptyState, Layout, Page, TextStyle } from '@shopify/polaris';\nimport { ResourcePicker, TitleBar } from '@shopify/app-bridge-react';\nimport store from 'store-js';\nimport ResourceListWithProducts from '../componenets/ResourceList';\nimport CarbonMetrics from '../componenets/carbon-metrics'\n//TextStyle has a variation prop that can give your text more visual meaning and add hierarchy to a page\n//Page replaces the div tags to make a polaris styled page\n//Layout\n\nconst img = 'https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg';\n// state is the state of resource picker\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants (first: 1){\n          edges {\n            node {\n              weight\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass Index extends React.Component {\n  constructor(){\n    super()\n    this.state = { \n      open: false,\n      showMetrics: false\n    };\n    this.showMetrics.bind(this)\n  }\n  showMetrics() {\n    const metricsToggle = !this.state.showMetric\n    return this.setState({ showMetrics: metricsToggle })\n  }\n  render() {\n    const emptyState = !store.get('ids');\n\n    return (\n        <Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') || [] }}>\n          {({ data = {}, loading, error }) => {\n            if (loading) return <div>Loadingâ€¦</div>;\n            if (error) return <div>{error.message}</div>;\n\n        return(\n          <Page>\n            <TitleBar\n              primaryAction={{\n                content: 'Select products',\n                onAction: () => this.setState({ open: true })\n              }}\n            />\n            <ResourcePicker\n              resourceType=\"Product\"\n              showVariants={false}\n              open={this.state.open}\n              onSelection={(resources) => this.handleSelection(resources)}\n              onCancel={() => this.setState({ open: false })}\n            />\n            {emptyState ? (\n            <Layout> \n              <EmptyState\n                heading=\"Select products to start\"\n                action={{\n                  content: 'Select products',\n                  onAction: () => this.setState({ open: true }),\n                }}\n                image={img}\n              >\n            <p>Select products to change their price temporarily.</p>\n          </EmptyState>\n        </Layout>\n        ) : (\n        <ResourceListWithProducts items={data.nodes}/>\n      )}\n      <CarbonMetrics items={data.nodes}/>\n    </Page>\n    );\n    }}\n  </Query>\n  );\n}\n  handleSelection = (resources) => {\n    const idsFromResources = resources.selection.map((product) => product.id);\n    this.setState({ open: false })\n    store.set('ids', idsFromResources);\n  };\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}