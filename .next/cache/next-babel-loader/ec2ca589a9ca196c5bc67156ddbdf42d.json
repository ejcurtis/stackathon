{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { AppProvider } from '@shopify/polaris';\nimport '@shopify/polaris/styles.css';\nimport translations from '@shopify/polaris/locales/en.json';\nimport { Provider } from '@shopify/app-bridge-react';\nimport Cookies from 'js-cookie';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo'; //component extends the App component to passes down the \n//Polaris components, styles, and everything else typically \n//found in an index file\n\nvar client = new ApolloClient({\n  fetchOptions: {\n    credentials: 'include'\n  }\n}); //The default configuration of Apollo enables browsers to easily authenticate \n//Wrapping the component in apollo will allow me to make a query request whenever a component is rendered\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(MyApp, _App);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyApp).apply(this, arguments));\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps;\n      var config = {\n        apiKey: API_KEY,\n        shopOrigin: Cookies.get(\"shopOrigin\"),\n        forceRedirect: true\n      };\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Sample App\"), __jsx(\"meta\", {\n        charSet: \"utf-8\"\n      })), __jsx(Provider, {\n        config: config\n      }, __jsx(AppProvider, {\n        i18n: translations\n      }, __jsx(ApolloProvider, {\n        client: client\n      }, __jsx(Component, pageProps)))));\n    }\n  }]);\n\n  return MyApp;\n}(App);\n\nexport default MyApp;\n; //The Polaris AppProvider component passes down the props and context\n//needed to use the Polaris library.\n//Your app needs to be wrapped in this component to use Polaris.\n//App is also wrapped in the Provider component from app-bridge-react to keep user ui costum to their data\n//config in the Provider componenet holds the user API data","map":{"version":3,"sources":["/Users/davidnoah/Desktop/fullstack/stackathon/pages/_app.js"],"names":["App","Head","AppProvider","translations","Provider","Cookies","ApolloClient","ApolloProvider","client","fetchOptions","credentials","MyApp","props","Component","pageProps","config","apiKey","API_KEY","shopOrigin","get","forceRedirect"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAO,6BAAP;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B,C,CACA;AACA;AACA;;AAEA,IAAMC,MAAM,GAAG,IAAIF,YAAJ,CAAiB;AAC9BG,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD;AADgB,CAAjB,CAAf,C,CAMA;AACA;;IAGMC,K;;;;;;;;;;;;;6BACK;AAAA,wBAC0B,KAAKC,KAD/B;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACYC,SADZ,eACYA,SADZ;AAEP,UAAMC,MAAM,GAAG;AAAEC,QAAAA,MAAM,EAAEC,OAAV;AAAmBC,QAAAA,UAAU,EAAEb,OAAO,CAACc,GAAR,CAAY,YAAZ,CAA/B;AAA0DC,QAAAA,aAAa,EAAE;AAAzE,OAAf;AACA,aACE,MAAC,KAAD,CAAO,QAAP,QACE,MAAC,IAAD,QACE,kCADF,EAEE;AAAM,QAAA,OAAO,EAAC;AAAd,QAFF,CADF,EAKI,MAAC,QAAD;AAAU,QAAA,MAAM,EAAEL;AAAlB,SACE,MAAC,WAAD;AAAa,QAAA,IAAI,EAAEZ;AAAnB,SACE,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAEK;AAAxB,SACE,MAAC,SAAD,EAAeM,SAAf,CADF,CADF,CADF,CALJ,CADF;AAeD;;;;EAnBiBd,G;;AAsBpB,eAAeW,KAAf;AAAqB,C,CAErB;AACA;AACA;AAGA;AACA","sourcesContent":["import App from 'next/app';\nimport Head from 'next/head';\nimport { AppProvider } from '@shopify/polaris';\nimport '@shopify/polaris/styles.css';\nimport translations from '@shopify/polaris/locales/en.json';\nimport { Provider } from '@shopify/app-bridge-react';\nimport Cookies from 'js-cookie';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\n//component extends the App component to passes down the \n//Polaris components, styles, and everything else typically \n//found in an index file\n\nconst client = new ApolloClient({\n  fetchOptions: {\n    credentials: 'include'\n  },\n});\n\n//The default configuration of Apollo enables browsers to easily authenticate \n//Wrapping the component in apollo will allow me to make a query request whenever a component is rendered\n\n\nclass MyApp extends App {\n  render() {\n    const { Component, pageProps } = this.props;\n    const config = { apiKey: API_KEY, shopOrigin: Cookies.get(\"shopOrigin\"), forceRedirect: true };\n    return (\n      <React.Fragment>\n        <Head>\n          <title>Sample App</title>\n          <meta charSet=\"utf-8\" />\n        </Head>\n          <Provider config={config}>\n            <AppProvider i18n={translations}>\n              <ApolloProvider client={client}>\n                <Component {...pageProps} />\n              </ApolloProvider>\n            </AppProvider>\n          </Provider>\n      </React.Fragment>\n    );\n  }\n}\n    \nexport default MyApp;;\n\n//The Polaris AppProvider component passes down the props and context\n//needed to use the Polaris library.\n//Your app needs to be wrapped in this component to use Polaris.\n\n\n//App is also wrapped in the Provider component from app-bridge-react to keep user ui costum to their data\n//config in the Provider componenet holds the user API data\n"]},"metadata":{},"sourceType":"module"}