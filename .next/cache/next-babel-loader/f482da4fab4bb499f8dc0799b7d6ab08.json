{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Card, Page, DataTable } from '@shopify/polaris';\nimport React from \"react\";\nimport axios from \"Axios\";\n\nclass CarbonMetrics extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      items\n    } = this.props;\n    const promises = items.map(async item => {\n      const name = item.title;\n      return await axios.get(`https://carbon-calculator-shopify.herokuapp.com/api/products/${name}/nutrition`);\n    });\n\n    _Promise.all(promises).then(result => {\n      const newItems = result.map((newItem, index) => {\n        return _objectSpread({}, items[index], {}, newItem.data);\n      });\n      this.setState({\n        items: newItems\n      });\n    });\n  }\n\n  render() {\n    const {\n      items\n    } = this.state;\n    console.log(items);\n    const enrichedItems = items.map(item => [item.title, item.nf_calories, item.nf_iron_dv, item.nf_calcium_dv, item.nf_vitamin_a_dv, item.nf_serving_size_qty]);\n    return __jsx(Page, {\n      title: \"Nutrition Metrics\"\n    }, __jsx(Card, null, __jsx(DataTable, {\n      columnContentTypes: ['text', 'numeric', 'numeric', 'numeric', 'numeric', 'numeric'],\n      headings: ['Product', 'Calories', 'Iron content (g)', 'Calcium (g)', 'Vitimin A (g)', 'Serving Size (Cups)'],\n      rows: enrichedItems\n    })));\n  }\n\n}\n\nexport default CarbonMetrics;","map":{"version":3,"sources":["/Users/davidnoah/Desktop/fullstack/stackathon/componenets/carbon-metrics.js"],"names":["Card","Page","DataTable","React","axios","CarbonMetrics","Component","constructor","props","state","items","componentDidMount","promises","map","item","name","title","get","all","then","result","newItems","newItem","index","data","setState","render","console","log","enrichedItems","nf_calories","nf_iron_dv","nf_calcium_dv","nf_vitamin_a_dv","nf_serving_size_qty"],"mappings":";;;;;;;;;;;;;;AAAA,SACEA,IADF,EAEEC,IAFF,EAGEC,SAHF,QAIO,kBAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAED,QAAMC,iBAAN,GAA2B;AACzB,UAAM;AAAED,MAAAA;AAAF,QAAY,KAAKF,KAAvB;AAEA,UAAMI,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAU,MAAOC,IAAP,IAAgB;AACzC,YAAMC,IAAI,GAAGD,IAAI,CAACE,KAAlB;AACA,aAAO,MAAMZ,KAAK,CAACa,GAAN,CAAW,gEAA+DF,IAAK,YAA/E,CAAb;AACD,KAHgB,CAAjB;;AAKA,aAAQG,GAAR,CAAYN,QAAZ,EAAsBO,IAAtB,CAA4BC,MAAD,IAAY;AACrC,YAAMC,QAAQ,GAAGD,MAAM,CAACP,GAAP,CAAW,CAACS,OAAD,EAAUC,KAAV,KAAoB;AAC9C,iCAAab,KAAK,CAACa,KAAD,CAAlB,MAA8BD,OAAO,CAACE,IAAtC;AACD,OAFgB,CAAjB;AAIA,WAAKC,QAAL,CAAc;AAAEf,QAAAA,KAAK,EAAEW;AAAT,OAAd;AACD,KAND;AAOD;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEhB,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACA,UAAMmB,aAAa,GAAGnB,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU,CACxCA,IAAI,CAACE,KADmC,EAExCF,IAAI,CAACgB,WAFmC,EAGxChB,IAAI,CAACiB,UAHmC,EAIxCjB,IAAI,CAACkB,aAJmC,EAKxClB,IAAI,CAACmB,eALmC,EAMxCnB,IAAI,CAACoB,mBANmC,CAApB,CAAtB;AASA,WACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC;AAAZ,OACE,MAAC,IAAD,QACE,MAAC,SAAD;AACE,MAAA,kBAAkB,EAAE,CAClB,MADkB,EAElB,SAFkB,EAGlB,SAHkB,EAIlB,SAJkB,EAKlB,SALkB,EAMlB,SANkB,CADtB;AASE,MAAA,QAAQ,EAAE,CACR,SADQ,EAER,UAFQ,EAGR,kBAHQ,EAIR,aAJQ,EAKR,eALQ,EAMR,qBANQ,CATZ;AAiBE,MAAA,IAAI,EAAEL;AAjBR,MADF,CADF,CADF;AAyBD;;AA9DyC;;AAgE5C,eAAexB,aAAf","sourcesContent":["import {\n  Card,\n  Page,\n  DataTable\n} from '@shopify/polaris';\nimport React from \"react\";\nimport axios from \"Axios\"\n\nclass CarbonMetrics extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      items: [],\n    };\n  }\n\n  async componentDidMount () {\n    const { items } = this.props;\n\n    const promises = items.map(async (item) => {\n      const name = item.title;\n      return await axios.get(`https://carbon-calculator-shopify.herokuapp.com/api/products/${name}/nutrition`);\n    });\n\n    Promise.all(promises).then((result) => {\n      const newItems = result.map((newItem, index) => {\n        return {  ...items[index], ...newItem.data };\n      })\n\n      this.setState({ items: newItems })\n    })\n  }\n\n  render (){\n    const { items } = this.state;\n    console.log(items)\n    const enrichedItems = items.map((item) => [\n      item.title,\n      item.nf_calories,\n      item.nf_iron_dv,\n      item.nf_calcium_dv,\n      item.nf_vitamin_a_dv,\n      item.nf_serving_size_qty\n    ])\n\n    return (\n      <Page title=\"Nutrition Metrics\">\n        <Card>\n          <DataTable\n            columnContentTypes={[\n              'text',\n              'numeric',\n              'numeric',\n              'numeric',\n              'numeric',\n              'numeric'\n            ]}\n            headings={[\n              'Product',\n              'Calories',\n              'Iron content (g)',\n              'Calcium (g)',\n              'Vitimin A (g)',\n              'Serving Size (Cups)'\n            ]}\n            rows={enrichedItems}\n          />\n        </Card>\n      </Page>\n    );\n  }\n}\nexport default CarbonMetrics "]},"metadata":{},"sourceType":"module"}